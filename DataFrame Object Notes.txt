- A DataFrame can be made of from some series or some dictionaries grouped together.
- A DataFrame can be visualized as a group of series stacked one on top of the other. The labels in the series 
make the columns and the data in the series form the rows.
- The column of a dataframe can be directly accessed by indexing.
- One must consider using a copy of a dataframe before performing any modification on the dataframe or its 
derived objects(such as series) as the modification to the derived objects can change the dataframe itself.
- Broacasting is the term used when a function is applied on series or the dataframe object and the changes are 
applied to all the values in the dataframe/series.
- Boolean masking is referred to as representing the values in a dataframe/series as True/False depending on a certain
condition.

Functions & Methods:
df.loc[row label, column label] 	- Returns a view of a particular value/values
df.loc[row label][column label] 	- Returns a copy of a particular value/values
df.iloc[row num index start:row num index end,column num index start:column num index end] 		- Returns a range of values from the df
df.loc[row label 1:row label 3, col label 1: col label 4] 	- Returns a range of values from the df
df.T 	- Transpose a dataframe
df.drop() 	- Returns a copy of the df with row/column dropped depending on the axis.
del df['Column name'] 	- Returns the df with column dropped.
df[df['Gold']>0] - Returns a df with applied condition = True/False
df.set_index(List of column names) - Returns a copy of the df with the requested columns as indexes.
df.reset_index() - Removes all the set indexes and returns the df to original
df.index - Attribute Returns the complete list of index.
df.columns - Attribute Returns the complete list of columns.
df[column name].unique() - Returns a list of all unique values in a column
df[column name].count() - Returns a count of all values in a column
df.index.names - Retrieves the label names of the indexes and can be used to assign the label names
df.fillna - Can be used to backfill/forwardfill missing values in a dataframe
df['Column Name'] = pd.Series({index num value: data1, index num value 2: data2...}) - Can be used add values to a dataframe.

